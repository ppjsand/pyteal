#!/usr/bin/env python
# begin_generated_IBM_copyright_prolog
#
# This is an automatically generated copyright prolog.
# After initializing,  DO NOT MODIFY OR MOVE
# ================================================================
#
# (C) Copyright IBM Corp.  2010,2011
# Eclipse Public License (EPL)
#
# ================================================================
#
# end_generated_IBM_copyright_prolog

# locale setup
import os
import gettext
import re
curdir = os.path.abspath(os.path.dirname(__file__))
localedir = os.path.join(curdir, '..', 'locale')
t = gettext.translation('messages', localedir, fallback=True)
_ = t.lgettext

import sys
from optparse import OptionParser
#from ibm.teal.registry import TEAL_LOG_DIR
#from ibm.teal.teal import TEAL_LOG_FILE

ORDERED_LEVELS = ['DEBUG','INFO', 'WARNING', 'ERROR', 'CRITICAL']

def _process_entry(entry_dict, control, teal_start_re, run_list, xref):
    ''' Process the entry now that it is complete '''
    
    xref['pids'].add(entry_dict['pid'])
    xref['tids'].add(entry_dict['tid'])
    xref['pymodules'].add(entry_dict['pymodule'])
    xref['levels'][entry_dict['level']] += 1
    
    if ORDERED_LEVELS.index(entry_dict['level']) < control['msg_level_idx']:
        return 
    
    if control['summary_only'] == True:
        return 
    
    print_entry = True
    if control['pids'] is not None and entry_dict['pid'] not in control['pids']:
        print_entry = False
    if control['threads'] is not None and entry_dict['tid'] not in control['threads']:
        print_entry = False
    if control['pymodules'] is not None and entry_dict['pymodule'] not in control['pymodules']:
        print_entry = False
    if control['regex'] is not None:
        matched = None
        for msg in entry_dict['msg']:
            matched = control['regex'].match(msg)
            if matched is not None:
                break
        if matched is None:
            print_entry = False

    if print_entry == True:
        _print_entry(entry_dict, control['compressed'])
    return

def _process_teal_run(run_list, control, in_entry, EOF=False):
    ''' Process a complete TEAL run worth of log '''
    if control['summary_only'] == True:
            if len(run_list) > 0:
                if control['verbose']:
                    print '        number of entries = ' + str(len(run_list))
            if EOF == False:
                _print_entry(in_entry)
    return
  
def _print_entry(entry_dict, compressed=False):
    ''' print out a log entry '''
    prt_prefix = entry_dict['prefix']
    if prt_prefix is None:
        prt_prefix = ''
    prt_msg = entry_dict['msg'][0]
    if compressed:
        if len(prt_msg) > 70:
            prt_msg = prt_msg[:68] + ' ...'
        if len(entry_dict['msg']) > 1:
            prt_msg += ' +' + str(len(entry_dict))
    
    print '{0:4d}: {1} [{2}:{3}] {4}{5} - {6}: {7}'.format(entry_dict['line_no'],entry_dict['timestamp'],entry_dict['pid'],
                                                        entry_dict['tid'],prt_prefix,entry_dict['pymodule'],
                                                        entry_dict['level'],prt_msg)
    if compressed == False and len(entry_dict['msg']) > 1: 
        for msg in entry_dict['msg'][1:]:
            print '      {0}'.format(msg)
    return 

if __name__ == '__main__':

    # Parse the command line        
    parser = OptionParser('usage: %prog [options]')
    parser.add_option('-l', '--log_file',
                      dest='log_file',
                      type='string',
                      action='store',
                      default=None,
                      help=_('TEAL log file to process -- default is the same as the teal command'))
    parser.add_option('-s', '--start',
                      dest='start',
                      action='store',
                      type='int',
                      default=None,
                      help=_('line in log file to start with'))
    parser.add_option('-e', '--end_line',
                      dest='end_line',
                      action='store',
                      type='int',
                      default=None,
                      help=_('line in log file to end with'))
    parser.add_option('-p', '--pids',
                      dest='pids',
                      type='string',
                      action='store',
                      default=None,
                      help=_('pids to display'))
    parser.add_option('-t', '--threads',
                      dest='threads',
                      type='string',
                      action='store',
                      default=None,
                      help=_('threads to show'))
    parser.add_option('-m', '--msglevel',
                      help=_('<debug | info | warning | error | critical> - optional [default: info]'),
                      choices=['debug','info', 'warning', 'error', 'critical'],
                      dest='msg_level',
                      default=None)
    parser.add_option('-y', '--pymodule',
                      dest='pymodules',
                      type='string',
                      action='store',
                      default=None,
                      help=_('python modules to show'))
    parser.add_option('-v', '--verbose',
                      dest='verbose',
                      action='store_true',
                      default=False,
                      help=_('verbose mode'))
    parser.add_option('', '--compressed',
                      dest='compressed',
                      action='store_true',
                      default=False,
                      help=_('compress log entry'))
    parser.add_option('-x', '--xref',
                      dest='xref',
                      action='store_true',
                      default=False,
                      help=_('print cross reference'))
    parser.add_option('-r','--regex',
                      dest='regex',
                      type='string',
                      action='store',
                      default=None,
                      help=_('regular expression to match against log'))
                    
    (options, args) = parser.parse_args()
      
    # Build control dictionary from options (and validate)   
    xref = {}
    control = {} 
    control['summary_only'] = True
    control['verbose'] = options.verbose
    control['start'] = options.start
    if control['verbose'] and control['start'] != 0:
        print 'Starting at line: ' + str(control['start'])
    control['end_line'] = options.end_line
    if control['verbose'] and control['end_line'] != 0:
        print 'Ending with line: ' + str(control['end_line'])
    
    if options.msg_level is None:
        control['msg_level_idx'] = ORDERED_LEVELS.index('INFO')
    else:
        control['msg_level_idx'] = ORDERED_LEVELS.index(options.msg_level.upper())
        control['summary_only'] = False
        
    if control['verbose']:
        print 'Message level: ' + ORDERED_LEVELS[control['msg_level_idx']]
        
    control['compressed'] = options.compressed
    if control['verbose'] and options.compressed == True:
        print 'Entries will be compressed'
        
    if options.pids is not None:
        control['pids'] = [pid.strip() for pid in options.pids.split(',')]
        control['summary_only'] = False
    else:
        control['pids'] = None
    if control['verbose'] and control['pids'] is not None:
        print 'Showing only pids: ' + ','.join(control['pids'])
    
    if options.threads is not None:
        control['threads'] = [thread.strip() for thread in options.threads.split(',')]
        control['summary_only'] = False
    else:
        control['threads'] = None
    if control['verbose'] and control['threads'] is not None:
        print 'Showing only threads: ' + ','.join(control['threads'])
    
    if options.pymodules is not None:
        control['pymodules'] = [pymodule.strip() for pymodule in options.pymodules.split(',')]
        control['summary_only'] = False
    else:
        control['pymodules'] = None
    if control['verbose'] and control['pymodules'] is not None:
        print 'Showing only pymoduless: ' + ','.join(control['pymodules'])
            
    if options.regex is not None:
        control['regex'] = re.compile(options.regex)
        control['summary_only'] = False
    else:
        control['regex'] = None
    if control['verbose'] and options.regex is not None:
        print 'Applying regular expression: ' + options.regex

    # Resolve and validate log file
    if options.log_file is not None:
        log_file = options.log_file
        if os.path.isdir(log_file) == True:
            log_file = os.path.join(log_file, TEAL_LOG_FILE)
    else:
        log_dir = os.environ.get(TEAL_LOG_DIR, '/var/log/teal')
        if os.path.isdir(log_dir) == False:
            print >> sys.stderr, _('log directory does not exist: ')  + log_dir 
            sys.exit(1)      
        log_file = os.path.join(log_dir, TEAL_LOG_FILE)
            
    if control['verbose']:
        print 'Processing log file: ' + str(log_file)
        
    if os.path.isfile(log_file) == False:
        print >> sys.stderr, _('log file does not exist: ')  + log_file   
        sys.exit(1)      

    if os.path.getsize(log_file) <= options.start:
        print >> sys.stderr, _('log file does not contain = or > start lines.  It contains: ')  + os.path.getsize(log_file)
        sys.exit(1)
        
    if os.path.getsize(log_file) < options.end_line:
        print >> sys.stderr, _('log file does not contain > end lines.  It contains: ')  + os.path.getsize(log_file)
        sys.exit(1)
        
    # Setup the regular expressions
    entry_start = re.compile("^(?P<timestamp>.*) \[(?P<pid>\d*):(?P<tid>-{0,1}\d*)\]\s+(?P<prefix>[H,C]:){0,1}(?P<pymodule>.*) - (?P<level>.*?): (?P<msg>.*)")    
    ENTRY_START_KEYS = ['timestamp', 'pid', 'tid', 'prefix', 'pymodule', 'level']
    
    teal_start_re = re.compile("\*{7} TEAL\((?P<pyid>\d*)\) Startup initiated on (?P<timestamp>.*)")
    
    xref['tids'] = set()
    xref['pids'] = set()
    xref['pymodules'] = set()
    xref['levels'] = {}
    for level in ORDERED_LEVELS:
        xref['levels'][level] = 0
    
    line_no = 0
    starts_found = 0 
    # Read the file
    with open(log_file, 'r') as in_file:
        
        in_entry = {'msg':[]}
        in_teal_run = []

        while True:
            line = in_file.readline()
            #print line
            line_no += 1
            # Check for EOF
            if line == '':
                if len(in_entry['msg']) != 0:
                    in_teal_run.append(in_entry)
                    _process_entry(in_entry, control, teal_start_re, in_teal_run, xref)
                if len(in_teal_run) != 0: 
                    _process_teal_run(in_teal_run, control, in_entry, EOF=True)
                break
            # skip blank lines
            if line == '\n':
                continue
            # Check if in range being processed 
            if control['start'] is not None and line_no < control['start']:
                continue
            if control['end_line'] is not None and line_no > control['end_line']:
                continue
            # Check if start of entry 
            matched =  entry_start.match(line) 
            if matched is not None:
                # Found the start of an entry 
                # process the last entry (if there is one)
                if len(in_entry['msg']) != 0: 
                    _process_entry(in_entry, control, teal_start_re, in_teal_run, xref)
                # Get the new entry 
                in_entry['line_no'] = line_no
                for key in ENTRY_START_KEYS:
                    in_entry[key] = matched.group(key)
                in_entry['msg'] = [matched.group('msg')]
                # See if it is starting a run 
                if teal_start_re.match(in_entry['msg'][0]):
                    starts_found += 1 
                    # Process last one 
                    _process_teal_run(in_teal_run, control, in_entry)
                    in_teal_run = [in_entry]
                else: 
                    in_teal_run.append(in_entry)
            else:
                # Found more of an entry 
                if len(in_entry['msg']) != 0:
                    in_entry['msg'].append(line.rstrip())
  
    if control['threads'] is not None:
        for t in control['threads']:
            if t not in xref['tids']:
                print 'WARNING: thread ' + str(t) + ' was not found'
  
    if control['pids'] is not None:
        for p in control['pids']:
            if p not in xref['pids']:
                print 'WARNING: process ' + str(p) + ' was not found'
  
    if control['pymodules'] is not None:
        for pym in control['pymodules']:
            if pym not in xref['pymodules']:
                print 'WARNING: python module ' + str(pym) + ' was not found'
  
    if control['verbose']:
        print 'lines processed = ' + str(line_no)
        print 'TEAL starts found = ' + str(starts_found)
        
    if options.xref == True:
        print 'Python modules:'
        if len(xref['pymodules']) > 0:
            print '  ' + ','.join(list(xref['pymodules']))
        else:
            print '  - none -'
            
        print 'Messages at each level:'
        for level, value in xref['levels'].items():
            print '    ' + level + ' = ' + str(value)
        
    sys.exit(0)
    
