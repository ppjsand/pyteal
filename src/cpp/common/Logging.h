// begin_generated_IBM_copyright_prolog
//
// This is an automatically generated copyright prolog.
// After initializing,  DO NOT MODIFY OR MOVE
// ================================================================
//
// (C) Copyright IBM Corp.  2010,2011
// Eclipse Public License (EPL)
//
// ================================================================
//
// end_generated_IBM_copyright_prolog
/**
 * \file Logging.h
 * \brief C++ Logging support
 */

#ifndef _H_LOGGING_
#define _H_LOGGING_

#include <string>
#include <ostream>
#include <sstream>
#include <fstream>
#include <iostream>
#include <cstring>
#include <climits>
#include <cstdlib>
#include <ctime>
#include <inttypes.h>
#include <unistd.h>

#include "TealException.h"
#include "pthreadmutex.h"
#define print(severity,compid,msg) TEAL::Log::Print(severity,compid,msg,__FILE__, __LINE__)
#define printForced(severity,compid,msg) TEAL::Log::PrintForced(severity,compid,msg,__FILE__, __LINE__)
#define TEAL_LOG_DIR_DEFAULT "/var/log/teal"
namespace TEAL {    

  /** 
   * \brief logLevel enumeration.
   *
   * Represents the level of log information that will be emitted. For
   * example, if you select TEAL_LOG_ERROR, only log messages with level
   * ERROR or greater will be emitted. The logging subsystem defaults to
   * level TEAL_LOG_INFO
   *
   */

  typedef enum logLevels { TEAL_LOG_DEBUG, 
                           TEAL_LOG_INFO,
                           TEAL_LOG_WARN,
                           TEAL_LOG_ERROR,
                           TEAL_LOG_CRITICAL,
                           TEAL_LOG_EXCEPT,
                           TEAL_LOG_MAX = CHAR_MAX
  } teal_log_level_t;


  /**
   * \brief The connector log level override environment variable.
   *
   * Allows for the user to set a new log level value. The connector
   * has to be restarted after setting said value to have it take
   * effect.
   */

  const std::string logLevelEnvVar("TEAL_CONN_LOG_LEVEL");

  /**
   * \brief A function to map a log level value to a string.
   *
   * Take the passed in log level and return a string representation.
   * If an invalid value for log level is passed in, return ??LEVEL.
   *
   * \param level A value representing a log level.
   *
   * \retval A string representing the passed log level or ??LEVEL.
   *
   */
  std::string mapLevel(const teal_log_level_t& level);
  

  /**
   * \brief A class to represent exceptions generated by the Log class.
   *
   * Note that exceptions should not leak, in general, because they 
   * should be handled by the creator of the log. 
   */

  class LogException : public TealException {

   public:
    /**
     * \brief Constructor
     *
     * Construct a LogException object with the string representation s.
     *
     * \param s A std::string representing the value of the exception.
     */

    LogException(const std::string& s) throw() : TealException(s) {};

    /**
     * \brief Destructor for LogException
     *
     * Required to match exception specification.
     */
    ~LogException() throw() {}
  };

  /**
   * \brief A class representing the Log subsystem.
   *
   * A Log is an object which wraps the behavior of emitting data
   * to a known location. It is initialized with that location.
   */

  class Log {

   public:
    
    /**
     * \brief Explicit default constructor.
     *
     *  Takes input from environment variables and sets up the logging
     *  subsystem. Sets the log level value that will restrict message
     *  output.
     *
     */
    explicit Log();

    /**
     * \brief Explicit default constructor.
     *
     * Sets up the logging subsystem to use an output stream as the
     * target for data emission. Sets the log level value that will
     * restrict message output.

     *
     */
    explicit Log(const std::ostream& strm);

    /**
     * \brief Destructor.
     *
     */
    ~Log();
    
    /**
     * \brief Helper to retrieve the log file name data member.
     *
     * \retval A std::string repesenting the fully-qualified path to the
     *         file being used as the target of the log output.
     */
    std::string retrieveLogFileName() const 
    {
      return ivLogPath + "/" + ivFileName;
    }

    /**
     * \brief Helper to retrieve the log level data member.
     *
     * \retval The value of the ivMessageLevel member.
     */
    teal_log_level_t retrieveLogLevel() const 
    {
      return ivMessageLevel;
    }

    /**
     * \brief Helper to retrieve the log status data member.
     *
     * \retval The value of the ivLogStatus member.
     */
    uint32_t retrieveLogStatus() const 
    {
      return ivLogStatus;
    }

    /**
     * \brief Conditionally print the message to the output area.
     *
     * print() will only output messages which are at the same level
     * or greater than the set log level value within the logger.
     *
     * \param severity The severity of the message represented as a 
     *        teal_log_level_t value.
     * \param compId A std::string representing the component issuing 
     *        the message.
     * \param message A std::string representing the message.
     */
    void Print(teal_log_level_t severity, 
               const std::string& compid, 
               const std::string& message, char* filename, int lineno);
    
    /**
     * \brief Uconditionally print the message to the output area.
     *
     * printForced() will always output messages regardless of the
     * log level value within the logger.
     *
     * \param severity The severity of the message represented as a 
     *        teal_log_level_t value.
     * \param compId A std::string representing the component issuing 
     *        the message.
     * \param message A std::string representing the message.
     */
    void PrintForced(teal_log_level_t severity, 
                     const std::string& compid, 
                     const std::string& message, char* filename, int lineno);
    
   private:
    /**
     * \brief Private copy constructor.
     */
    Log(const Log& theLog) {}

    /**
     * \brief Helper to retrieve the output target.
     *
     * \retval A std::ostream representing the output target.
     */
    std::ostream& theStream() const
    {
      if(ivFileStream) {
        return *ivFileStream;
      } else {
        return *ivRegularStream;
      }
    }

    /**
     * \brief Helper to set the ivLogLevel member.
     */
    void setLogLevel(void);

    /**
     * \brief Helper to generate a unique file name for the log file.
     *
     * \retval A std::string representing the file name.
     */
    std::string generateFileName();

    /**
     * \brief Helper to generate time stamp used on messages.
     *
     * \retval A std::string representing the current time.
     */
    std::string generateTimeStamp() const;

    /**
     * \brief A std::ofstream representing the file opened.
     */
    std::ofstream *ivFileStream;

    /** 
     * \brief A std::ostream representing the output target.
     */
    std::ostream *ivRegularStream;

    /**
     * \brief the message level threshold.
     */
    teal_log_level_t ivMessageLevel;
    
    /**
     * \brief The log file name.
     */
    std::string ivFileName;

    /** 
     * \brief The path to which the log file is written.
     */
    std::string ivLogPath;

    /**
     * \brief The status of the log. Represents underlying stream status.
     */
    uint32_t ivLogStatus; // 1 means okay, 0 means something failed.

    /**
     * \brief A string representing the time format passed to C time functions.
     */
    std::string ivTimeFormat;
    
    /**
     * \brief The Log's mutex. Needed because multiple threads may share a log.
     */
    static PthreadMutex ivLogMutex;

  }; // class Log

  /**
   * \brief The global log used by the connector.
   */
  extern Log theLog;

  /**
   * \brief A helper function to get the global log.
   * \retval A reference to the global log.
   */
  inline Log &getLog() {
    return theLog;
  }
} // namespace TEAL

#endif /* __Logging__h__ */

