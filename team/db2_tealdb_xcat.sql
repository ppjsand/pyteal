DROP DATABASE tealdb0;
CREATE DATABASE tealdb0;

CONNECT TO tealdb0;

DROP TABLESPACE tealdb0_space;
DROP BUFFERPOOL tealdb0_pool;

CREATE BUFFERPOOL tealdb0_pool PAGESIZE 16K;
CREATE TABLESPACE tealdb0_space PAGESIZE 16K BUFFERPOOL tealdb0_pool;

CREATE TABLE x_tealalert2event (
  "assoc_id" BIGINT GENERATED BY DEFAULT AS IDENTITY,
  "alert_recid" BIGINT NOT NULL,
  "assoc_type" CHAR(1) NOT NULL,
  "t_event_recid" BIGINT NOT NULL, 
  "comments" VARCHAR(512),
  "disable" VARCHAR(8),
  PRIMARY KEY  ("assoc_id")
);
CREATE VIEW tealalert2event AS SELECT * FROM x_tealalert2event;

CREATE TABLE x_tealalert2alert (
  "assoc_id" BIGINT GENERATED BY DEFAULT AS IDENTITY,
  "alert_recid" BIGINT NOT NULL,
  "assoc_type" CHAR(1) NOT NULL,
  "t_alert_recid" BIGINT NOT NULL,
  "comments" VARCHAR(512),
  "disable" VARCHAR(8),
  PRIMARY KEY  ("assoc_id")
);
CREATE VIEW tealalert2alert AS SELECT * FROM x_tealalert2alert;

CREATE TABLE x_tealcheckpoint (
  "chkpt_id" BIGINT GENERATED BY DEFAULT AS IDENTITY,
  "name" VARCHAR(128),
  "status" CHAR(1), 
  "event_recid" BIGINT,
  "data" VARCHAR(1024),
  "comments" VARCHAR(512),
  "disable" VARCHAR(8),
  PRIMARY KEY  ("chkpt_id")
);
CREATE VIEW tealcheckpoint AS SELECT * FROM x_tealcheckpoint;

CREATE TABLE x_tealalertlog (
  "rec_id" BIGINT GENERATED BY DEFAULT AS IDENTITY,
  "alert_id" CHAR(8) NOT NULL,
  "creation_time" TIMESTAMP NOT NULL WITH DEFAULT CURRENT_TIMESTAMP,
  "severity" CHAR(1) NOT NULL,
  "urgency" CHAR(1) NOT NULL,
  "event_loc_type" VARCHAR(2) NOT NULL,
  "event_loc" VARCHAR(255) NOT NULL,
  "fru_loc" VARCHAR(512),
  "recommendation" VARCHAR(2048) NOT NULL,
  "reason" VARCHAR(512) NOT NULL,
  "src_name" VARCHAR(64) NOT NULL,
  "state" SMALLINT NOT NULL,
  "raw_data" VARCHAR(2048),
  "comment" VARCHAR(512),
  "disable" VARCHAR(8),
  PRIMARY KEY  ("rec_id")
);
CREATE VIEW tealalertlog AS SELECT * FROM x_tealalertlog;
CREATE VIEW tealactivealerts AS SELECT * FROM x_tealalertlog WHERE "state" = 1 AND "rec_id" NOT IN (SELECT "t_alert_recid" FROM x_tealalert2alert WHERE "assoc_type" = 'D');


CREATE TABLE x_tealeventlog (
  "rec_id" BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),
  "event_id" CHAR(8) NOT NULL,
  "time_logged" TIMESTAMP NOT NULL WITH DEFAULT CURRENT_TIMESTAMP,
  "time_occurred" TIMESTAMP NOT NULL,
  "src_comp" VARCHAR(128) NOT NULL,
  "src_loc_type" VARCHAR(2) NOT NULL,
  "src_loc" VARCHAR(255) NOT NULL,
  "rpt_comp" VARCHAR(128),
  "rpt_loc_type" VARCHAR(2),
  "rpt_loc" VARCHAR(255),
  "event_cnt" INTEGER,
  "elapsed_time" BIGINT,
  "raw_data_fmt" BIGINT NOT NULL,
  "raw_data" VARCHAR(1024),
  "comments" VARCHAR(512),
  "disable" VARCHAR(8),
  PRIMARY KEY  ("rec_id")
);
CREATE VIEW tealeventlog AS SELECT * FROM x_tealeventlog;

CREATE TABLE x_CNM_1_2 (
  "rec_id" BIGINT NOT NULL,
  "eed_loc_info" VARCHAR(64) NOT NULL,
  "encl_mtms" VARCHAR(20) NOT NULL,
  "pwr_ctrl_mtms" VARCHAR(20) NOT NULL,
  "neighbor_loc_type" VARCHAR(2),
  "neighbor_loc" VARCHAR(256),
  "recovery_file_path" VARCHAR(32) NOT NULL,
  "isnm_raw_data" VARCHAR(1024),
  "local_port" VARCHAR(256), 
  "local_torrent" VARCHAR(256),
  "local_planar" VARCHAR(256),
  "local_om1" VARCHAR(256),
  "local_om2" VARCHAR(256),
  "nbr_port" VARCHAR(256),
  "nbr_torrent" VARCHAR(256),
  "nbr_planar" VARCHAR(256),
  "nbr_om1" VARCHAR(256),
  "nbr_om2" VARCHAR(256),
  "global_counter" BIGINT,
  "comments" VARCHAR(512),
  "disable" VARCHAR(8),
  PRIMARY KEY  ("rec_id")
);

CREATE TABLE x_GPFS_1_1 (
  "rec_id" BIGINT NOT NULL,
  "severity" VARCHAR(256) NOT NULL,
  "node_ip" VARCHAR(256),
  "sgmgr_ip" VARCHAR(256),
  "user_unba" VARCHAR(256),
  "meta_unba" VARCHAR(256),
  "user_ill_rep" VARCHAR(256),
  "meta_ill_rep" VARCHAR(256),
  "user_exposed" VARCHAR(256),
  "meta_exposed" VARCHAR(256),
  "pool_name" VARCHAR(256),
  "pool_status" VARCHAR(256),
  "pool_usage" INTEGER,
  "comments" VARCHAR(512),
  "disable" VARCHAR(8),
  PRIMARY KEY  ("rec_id")
);

CREATE TABLE x_GPFS_1_2 (
  "rec_id" BIGINT NOT NULL,
  "severity" VARCHAR(256) NOT NULL,
  "fs_name" VARCHAR(256) NOT NULL,
  "node_name" VARCHAR(256),
  "node_ip" VARCHAR(256),
  "status" VARCHAR(256),
  "availability" VARCHAR(256),
  "fg_name" VARCHAR(256),
  "meta" VARCHAR(256),
  "data" VARCHAR(256),
  "cmd" VARCHAR(256),
  "my_role" VARCHAR(256),
  "ck_reason" VARCHAR(256),
  "other_node" VARCHAR(256),
  "data_len" INTEGER,
  "err_cnt_client" INTEGER,
  "err_cnt_serv" INTEGER,
  "err_cnt_nsd" INTEGER,
  "rpt_interval" INTEGER,
  "io_length" INTEGER,
  "io_time" INTEGER,
  "start_sector" BIGINT,
  "comments" VARCHAR(512),
  "disable" VARCHAR(8),
  PRIMARY KEY  ("rec_id")
);

CREATE TABLE x_GPFS_1_3 (
  "rec_id" BIGINT NOT NULL,
  "severity" VARCHAR(256) NOT NULL,
  "node_name" VARCHAR(256) NOT NULL,
  "location" VARCHAR(256),
  "fru" VARCHAR(256),
  "wwn" VARCHAR(256),
  "state" VARCHAR(256),
  "reason" VARCHAR(256),
  "dev_name" VARCHAR(256),
  "priority" INTEGER,
  "rem_redund" INTEGER,
  "err" INTEGER,
  "comments" VARCHAR(512),
  "disable" VARCHAR(8),
  PRIMARY KEY  ("rec_id")
);

CREATE TABLE x_GPFS_1_4 (
  "rec_id" BIGINT NOT NULL,
  "severity" VARCHAR(256) NOT NULL,
  "msg_text" VARCHAR(256),
  "diagnosis" VARCHAR(256),
  "wait_time" INTEGER,
  "msg_level" INTEGER,
  PRIMARY KEY  ("rec_id")
);

CREATE TABLE x_clusterinfo (
  "cluster_id" VARCHAR(128) NOT NULL,
  "cluster_name" VARCHAR(128),
  "cluster_type" VARCHAR(128),
  "min_rel_level" VARCHAR(128),
  "uid_domain" VARCHAR(128),
  "rsh_cmd" VARCHAR(128),
  "rcp_cmd" VARCHAR(128),
  "prim_server" VARCHAR(128),
  "sec_server" VARCHAR(128), 
  "c_ref_time" VARCHAR(128),
  "n_ref_time" VARCHAR(128),
  "f_ref_time" VARCHAR(128),
  "fp_ref_time" VARCHAR(128),
  "sdr_fs_num" INTEGER,
  "num_nodes" INTEGER,
  "max_blk_size" INTEGER,
  "num_fs" INTEGER,
  "token_server" INTEGER,
  "fail_det_time" INTEGER,
  "tcp_port" INTEGER,
  "min_timeout" INTEGER,
  "max_timeout" INTEGER,
  "num_free_disk" INTEGER,
  "change" INTEGER NOT NULL,
  "health" INTEGER NOT NULL,
  "comments" VARCHAR(512),
  "disable" VARCHAR(8),
  PRIMARY KEY  ("cluster_id")
);

CREATE TABLE x_clusterinfo_tmp (
  "cluster_id" VARCHAR(128) NOT NULL,
  "cluster_name" VARCHAR(128),
  "cluster_type" VARCHAR(128),
  "min_rel_level" VARCHAR(128),
  "uid_domain" VARCHAR(128),
  "rsh_cmd" VARCHAR(128),
  "rcp_cmd" VARCHAR(128),
  "prim_server" VARCHAR(128),
  "sec_server" VARCHAR(128), 
  "c_ref_time" VARCHAR(128),
  "n_ref_time" VARCHAR(128),
  "f_ref_time" VARCHAR(128),
  "fp_ref_time" VARCHAR(128),
  "sdr_fs_num" INTEGER,
  "num_nodes" INTEGER,
  "max_blk_size" INTEGER,
  "num_fs" INTEGER,
  "token_server" INTEGER,
  "fail_det_time" INTEGER,
  "tcp_port" INTEGER,
  "min_timeout" INTEGER,
  "max_timeout" INTEGER,
  "num_free_disk" INTEGER,
  "change" INTEGER NOT NULL,
  "health" INTEGER NOT NULL,
  "comments" VARCHAR(512),
  "disable" VARCHAR(8),
  PRIMARY KEY  ("cluster_id")
);

CREATE TABLE x_nodeinfo (
  "cluster_id" VARCHAR(128) NOT NULL,
  "ip_addr" VARCHAR(128) NOT NULL,
  "node_name" VARCHAR(128),
  "type" VARCHAR(128),
  "endian" VARCHAR(128),
  "os_name" VARCHAR(128),
  "version" VARCHAR(128),
  "platform" VARCHAR(128),
  "admin" VARCHAR(128), 
  "status" VARCHAR(128),
  "umnt_disk_fail" VARCHAR(128),
  "healthy" VARCHAR(128),
  "diag" VARCHAR(128),
  "pg_pool_size" BIGINT,
  "failure_count" INTEGER,
  "thread_wait" INTEGER,
  "pre_threads" INTEGER,
  "max_MBPS" INTEGER,
  "max_file_cache" INTEGER,
  "max_stat_cache" INTEGER,
  "work1_threads" INTEGER,
  "dm_evt_timeout" INTEGER,
  "dm_mnt_timeout" INTEGER,
  "dm_ses_timeout" INTEGER,
  "nsd_win_mnt" INTEGER,
  "nsd_time_mnt" INTEGER,
  "num_disk_access" INTEGER,
  "change" INTEGER NOT NULL,
  "health" INTEGER NOT NULL,
  "comments" VARCHAR(512),
  "disable" VARCHAR(8),
  PRIMARY KEY  ("cluster_id","ip_addr")
);

CREATE TABLE x_nodeinfo_tmp (
  "cluster_id" VARCHAR(128) NOT NULL,
  "ip_addr" VARCHAR(128) NOT NULL,
  "node_name" VARCHAR(128),
  "type" VARCHAR(128),
  "endian" VARCHAR(128),
  "os_name" VARCHAR(128),
  "version" VARCHAR(128),
  "platform" VARCHAR(128),
  "admin" VARCHAR(128), 
  "status" VARCHAR(128),
  "umnt_disk_fail" VARCHAR(128),
  "healthy" VARCHAR(128),
  "diag" VARCHAR(128),
  "pg_pool_size" BIGINT,
  "failure_count" INTEGER,
  "thread_wait" INTEGER,
  "pre_threads" INTEGER,
  "max_MBPS" INTEGER,
  "max_file_cache" INTEGER,
  "max_stat_cache" INTEGER,
  "work1_threads" INTEGER,
  "dm_evt_timeout" INTEGER,
  "dm_mnt_timeout" INTEGER,
  "dm_ses_timeout" INTEGER,
  "nsd_win_mnt" INTEGER,
  "nsd_time_mnt" INTEGER,
  "num_disk_access" INTEGER,
  "change" INTEGER NOT NULL,
  "health" INTEGER NOT NULL,
  "comments" VARCHAR(512),
  "disable" VARCHAR(8),
  PRIMARY KEY  ("cluster_id","ip_addr")
);

CREATE TABLE x_fsinfo (
  "cluster_id" VARCHAR(128) NOT NULL,
  "fs_name" VARCHAR(128) NOT NULL,
  "manager" VARCHAR(128),
  "status" VARCHAR(128),
  "x_status" VARCHAR(128),
  "pool_ref_time" VARCHAR(128),
  "total_space" BIGINT,
  "total_inodes" BIGINT, 
  "free_inodes" BIGINT,
  "free_space" BIGINT,
  "full_blk_space" BIGINT,
  "sub_blk_space" BIGINT,
  "stg_pool_num" INTEGER,
  "num_mgmt" INTEGER,
  "read_duration" INTEGER,
  "num_mnt_nodes" INTEGER,
  "num_policies" INTEGER,
  "write_duration" INTEGER,
  "was_updated" INTEGER,
  "num_mgr_chg" INTEGER,
  "change" INTEGER NOT NULL,
  "health" INTEGER NOT NULL,
  "comments" VARCHAR(512),
  "disable" VARCHAR(8),
  PRIMARY KEY  ("cluster_id","fs_name")
);

CREATE TABLE x_fsinfo_tmp (
  "cluster_id" VARCHAR(128) NOT NULL,
  "fs_name" VARCHAR(128) NOT NULL,
  "manager" VARCHAR(128),
  "status" VARCHAR(128),
  "x_status" VARCHAR(128),
  "pool_ref_time" VARCHAR(128),
  "total_space" BIGINT,
  "total_inodes" BIGINT, 
  "free_inodes" BIGINT,
  "free_space" BIGINT,
  "full_blk_space" BIGINT,
  "sub_blk_space" BIGINT,
  "stg_pool_num" INTEGER,
  "num_mgmt" INTEGER,
  "read_duration" INTEGER,
  "num_mnt_nodes" INTEGER,
  "num_policies" INTEGER,
  "write_duration" INTEGER,
  "was_updated" INTEGER,
  "num_mgr_chg" INTEGER,
  "change" INTEGER NOT NULL,
  "health" INTEGER NOT NULL,
  "comments" VARCHAR(512),
  "disable" VARCHAR(8),
  PRIMARY KEY  ("cluster_id","fs_name")
);

CREATE TABLE x_stgpoolinfo (
  "cluster_id" VARCHAR(128) NOT NULL,
  "fs_name" VARCHAR(128) NOT NULL,
  "stg_name" VARCHAR(128) NOT NULL,
  "status" VARCHAR(128),
  "refresh_time" VARCHAR(128),
  "perf_ref_time" VARCHAR(128),
  "total_space" BIGINT,
  "free_space" BIGINT,
  "parent_fs" INTEGER,
  "num_disks" INTEGER,
  "num_disk_items" INTEGER,
  "change" INTEGER NOT NULL,
  "health" INTEGER NOT NULL,
  "comments" VARCHAR(512),
  "disable" VARCHAR(8),
  PRIMARY KEY  ("cluster_id","fs_name","stg_name")
);

CREATE TABLE x_stgpoolinfo_tmp (
  "cluster_id" VARCHAR(128) NOT NULL,
  "fs_name" VARCHAR(128) NOT NULL,
  "stg_name" VARCHAR(128) NOT NULL,
  "status" VARCHAR(128),
  "refresh_time" VARCHAR(128),
  "perf_ref_time" VARCHAR(128),
  "total_space" BIGINT,
  "free_space" BIGINT,
  "parent_fs" INTEGER,
  "num_disks" INTEGER,
  "num_disk_items" INTEGER,
  "change" INTEGER NOT NULL,
  "health" INTEGER NOT NULL,
  "comments" VARCHAR(512),
  "disable" VARCHAR(8),
  PRIMARY KEY  ("cluster_id","fs_name","stg_name")
);

CREATE TABLE x_diskinfo (
  "cluster_id" VARCHAR(128) NOT NULL,
  "disk_name" VARCHAR(128) NOT NULL,
  "node_name" VARCHAR(128),
  "status" VARCHAR(128),
  "availability" VARCHAR(128),
  "pool_name" VARCHAR(128),
  "vol_id" VARCHAR(128),
  "meta_data" VARCHAR(128),
  "data" VARCHAR(128),
  "disk_wait" VARCHAR(128),
  "total_space" BIGINT,
  "full_blk_space" BIGINT,
  "sub_blk_space" BIGINT,
  "fail_group_id" INTEGER,
  "is_free" INTEGER,
  "change" INTEGER NOT NULL,
  "health" INTEGER NOT NULL,
  "comments" VARCHAR(512),
  "disable" VARCHAR(8),
  PRIMARY KEY  ("cluster_id","disk_name")
);

CREATE TABLE x_diskinfo_tmp (
  "cluster_id" VARCHAR(128) NOT NULL,
  "disk_name" VARCHAR(128) NOT NULL,
  "node_name" VARCHAR(128),
  "status" VARCHAR(128),
  "availability" VARCHAR(128),
  "pool_name" VARCHAR(128),
  "vol_id" VARCHAR(128),
  "meta_data" VARCHAR(128),
  "data" VARCHAR(128),
  "disk_wait" VARCHAR(128),
  "total_space" BIGINT,
  "full_blk_space" BIGINT,
  "sub_blk_space" BIGINT,
  "fail_group_id" INTEGER,
  "is_free" INTEGER,
  "change" INTEGER NOT NULL,
  "health" INTEGER NOT NULL,
  "comments" VARCHAR(512),
  "disable" VARCHAR(8),
  PRIMARY KEY  ("cluster_id","disk_name")
);

CREATE TABLE x_fsetinfo (
  "cluster_id" VARCHAR(128) NOT NULL,
  "fs_name" VARCHAR(128) NOT NULL,
  "id" VARCHAR(128) NOT NULL,
  "fset_name" VARCHAR(128),
  "root_inode" VARCHAR(128),
  "parent_id" VARCHAR(128),
  "comment" VARCHAR(128), 
  "status" VARCHAR(128),
  "path" VARCHAR(128),
  "created" VARCHAR(128),
  "inodes" BIGINT,
  "data" BIGINT,
  "version" INTEGER,
  "change" INTEGER NOT NULL,
  "health" INTEGER NOT NULL,
  "comments" VARCHAR(512),
  "disable" VARCHAR(8),
  PRIMARY KEY  ("cluster_id","fs_name","id")
);

CREATE TABLE x_fsetinfo_tmp (
  "cluster_id" VARCHAR(128) NOT NULL,
  "fs_name" VARCHAR(128) NOT NULL,
  "id" VARCHAR(128) NOT NULL,
  "fset_name" VARCHAR(128),
  "root_inode" VARCHAR(128),
  "parent_id" VARCHAR(128),
  "comment" VARCHAR(128), 
  "status" VARCHAR(128),
  "path" VARCHAR(128),
  "created" VARCHAR(128),
  "inodes" BIGINT,
  "data" BIGINT,
  "version" INTEGER,
  "change" INTEGER NOT NULL,
  "health" INTEGER NOT NULL,
  "comments" VARCHAR(512),
  "disable" VARCHAR(8),
  PRIMARY KEY  ("cluster_id","fs_name","id")
);

CREATE TABLE x_rginfo (
  "cluster_id" VARCHAR(128) NOT NULL,
  "rg_name" VARCHAR(64) NOT NULL,
  "rg_act_svr" VARCHAR(64),
  "rg_svrs" VARCHAR(128),
  "rg_id" VARCHAR(20),
  "rg_das" INTEGER,
  "rg_vdisks" INTEGER,
  "rg_pdisks" INTEGER, 
  "change" INTEGER NOT NULL,
  "health" INTEGER NOT NULL,
  "comments" VARCHAR(512),
  "disable" VARCHAR(8),
  PRIMARY KEY  ("cluster_id","rg_name")
);

CREATE TABLE x_rginfo_tmp (
  "cluster_id" VARCHAR(128) NOT NULL,
  "rg_name" VARCHAR(64) NOT NULL,
  "rg_act_svr" VARCHAR(64),
  "rg_svrs" VARCHAR(128),
  "rg_id" VARCHAR(20),
  "rg_das" INTEGER,
  "rg_vdisks" INTEGER,
  "rg_pdisks" INTEGER, 
  "change" INTEGER NOT NULL,
  "health" INTEGER NOT NULL,
  "comments" VARCHAR(512),
  "disable" VARCHAR(8),
  PRIMARY KEY  ("cluster_id","rg_name")
);

CREATE TABLE x_dainfo (
  "cluster_id" VARCHAR(128) NOT NULL,
  "rg_name" VARCHAR(64) NOT NULL,
  "da_name" VARCHAR(64) NOT NULL,
  "da_bg_task" VARCHAR(32),
  "da_task_priority" VARCHAR(32),
  "da_need_service" VARCHAR(8),
  "da_task_percent" INTEGER,
  "da_vdisks" INTEGER,
  "da_pdisks" INTEGER,
  "da_spares" INTEGER,
  "da_replace_thres" INTEGER,
  "da_free_space" BIGINT,
  "da_scrub_dura" INTEGER,
  "change" INTEGER NOT NULL,
  "health" INTEGER NOT NULL,
  "comments" VARCHAR(512),
  "disable" VARCHAR(8),
  PRIMARY KEY  ("cluster_id","rg_name","da_name")
);

CREATE TABLE x_dainfo_tmp (
  "cluster_id" VARCHAR(128) NOT NULL,
  "rg_name" VARCHAR(64) NOT NULL,
  "da_name" VARCHAR(64) NOT NULL,
  "da_bg_task" VARCHAR(32),
  "da_task_priority" VARCHAR(32),
  "da_need_service" VARCHAR(8),
  "da_task_percent" INTEGER,
  "da_vdisks" INTEGER,
  "da_pdisks" INTEGER,
  "da_spares" INTEGER,
  "da_replace_thres" INTEGER,
  "da_free_space" BIGINT,
  "da_scrub_dura" INTEGER,
  "change" INTEGER NOT NULL,
  "health" INTEGER NOT NULL,
  "comments" VARCHAR(512),
  "disable" VARCHAR(8),
  PRIMARY KEY  ("cluster_id","rg_name","da_name")
);

CREATE TABLE x_vdiskinfo (
  "cluster_id" VARCHAR(128) NOT NULL,
  "rg_name" VARCHAR(64) NOT NULL,
  "da_name" VARCHAR(64) NOT NULL,
  "vdisk_name" VARCHAR(64) NOT NULL,
  "vdisk_raid_code" VARCHAR(32),
  "vdisk_state" VARCHAR(64),
  "vdisk_remarks" VARCHAR(32),
  "vdisk_block_size" INTEGER,
  "vdisk_size" BIGINT,
  "change" INTEGER NOT NULL,
  "health" INTEGER NOT NULL,
  "comments" VARCHAR(512),
  "disable" VARCHAR(8),
  PRIMARY KEY  ("cluster_id","rg_name","da_name","vdisk_name")
);

CREATE TABLE x_vdiskinfo_tmp (
  "cluster_id" VARCHAR(128) NOT NULL,
  "rg_name" VARCHAR(64) NOT NULL,
  "da_name" VARCHAR(64) NOT NULL,
  "vdisk_name" VARCHAR(64) NOT NULL,
  "vdisk_raid_code" VARCHAR(32),
  "vdisk_state" VARCHAR(64),
  "vdisk_remarks" VARCHAR(32),
  "vdisk_block_size" INTEGER,
  "vdisk_size" BIGINT,
  "change" INTEGER NOT NULL,
  "health" INTEGER NOT NULL,
  "comments" VARCHAR(512),
  "disable" VARCHAR(8),
  PRIMARY KEY  ("cluster_id","rg_name","da_name","vdisk_name")
);

CREATE TABLE x_pdiskinfo (
  "cluster_id" VARCHAR(128) NOT NULL,
  "rg_name" VARCHAR(64) NOT NULL,
  "da_name" VARCHAR(64) NOT NULL,
  "pdisk_name" VARCHAR(64) NOT NULL,
  "pdisk_dev_path" VARCHAR(64),
  "pdisk_state" VARCHAR(160),
  "pdisk_fru" VARCHAR(32),
  "pdisk_location" VARCHAR(32),
  "pdisk_repl_prior" INTEGER,
  "pdisk_free_space" BIGINT,
  "change" INTEGER NOT NULL,
  "health" INTEGER NOT NULL,
  "comments" VARCHAR(512),
  "disable" VARCHAR(8),
  PRIMARY KEY  ("cluster_id","rg_name","da_name","pdisk_name")
);

CREATE TABLE x_pdiskinfo_tmp (
  "cluster_id" VARCHAR(128) NOT NULL,
  "rg_name" VARCHAR(64) NOT NULL,
  "da_name" VARCHAR(64) NOT NULL,
  "pdisk_name" VARCHAR(64) NOT NULL,
  "pdisk_dev_path" VARCHAR(64),
  "pdisk_state" VARCHAR(160),
  "pdisk_fru" VARCHAR(32),
  "pdisk_location" VARCHAR(32),
  "pdisk_repl_prior" INTEGER,
  "pdisk_free_space" BIGINT,
  "change" INTEGER NOT NULL,
  "health" INTEGER NOT NULL,
  "comments" VARCHAR(512),
  "disable" VARCHAR(8),
  PRIMARY KEY  ("cluster_id","rg_name","da_name","pdisk_name")
);

CREATE TABLE X_LL_1_1 (
    "rec_id" BIGINT NOT NULL, 
    "time_occurred" BIGINT NOT NULL,
    "time_logged" BIGINT NOT NULL,
    "msg_type" CHAR(1),
    "message" VARCHAR(1024) NOT NULL,
    "detail" VARCHAR(1024) NOT NULL,
    "comments" VARCHAR(512),
    "disable" VARCHAR(8),
    PRIMARY KEY  ("rec_id")
);

CREATE TABLE "XCATDB  "."X_SFP_1_1"  (
    "rec_id" BIGINT NOT NULL,
    "prob_num" INTEGER NOT NULL,
    "description" VARCHAR(256) NOT NULL,
    "call_home" CHAR(1),
    "fru_list" VARCHAR(1536),
    "sfp_raw_data" VARCHAR(2048),
    "comments" VARCHAR(512),
    "disable" VARCHAR(8),
    PRIMARY KEY  ("rec_id")
);

CREATE TABLE SITE (
	"key" VARCHAR(128) NOT NULL DEFAULT '', 
	"value" VARCHAR(512), 
	"comments" VARCHAR(512), 
	"disable" VARCHAR(8), 
	PRIMARY KEY("key")
);

ALTER TABLE X_TEALALERT2ALERT ADD CONSTRAINT TEAL_FK_AREC FOREIGN KEY ("alert_recid") REFERENCES X_TEALALERTLOG ("rec_id") ON DELETE CASCADE;
ALTER TABLE X_TEALALERT2ALERT ADD CONSTRAINT TEAL_FK_T_AREC FOREIGN KEY ("t_alert_recid") REFERENCES X_TEALALERTLOG ("rec_id") ON DELETE RESTRICT;
ALTER TABLE X_TEALALERT2ALERT ADD CONSTRAINT TEAL_A2A_ASSOC_CHECK CHECK("assoc_type" IN ('C','S','D'));

ALTER TABLE X_TEALALERT2EVENT ADD CONSTRAINT TEAL_FK_EREC FOREIGN KEY ("alert_recid") REFERENCES X_TEALALERTLOG ("rec_id") ON DELETE CASCADE;
ALTER TABLE X_TEALALERT2EVENT ADD CONSTRAINT TEAL_FK_T_EREC FOREIGN KEY ("t_event_recid") REFERENCES X_TEALEVENTLOG ("rec_id") ON DELETE RESTRICT;
ALTER TABLE X_TEALALERT2EVENT ADD CONSTRAINT TEAL_A2E_ASSOC_CHECK CHECK("assoc_type" IN ('C','S'));

ALTER TABLE X_TEALCHECKPOINT ADD CONSTRAINT TEAL_FK_CHKREC FOREIGN KEY ("event_recid") REFERENCES X_TEALEVENTLOG ("rec_id") ON DELETE RESTRICT;

ALTER TABLE X_TEALALERTLOG ADD CONSTRAINT TEAL_ALERT_STATE_CHECK CHECK ("state" IN (1,2));

ALTER TABLE x_CNM_1_2 ADD CONSTRAINT TEAL_ISNM_FK FOREIGN KEY ("rec_id") REFERENCES X_TEALEVENTLOG ("rec_id") ON DELETE CASCADE;

ALTER TABLE x_GPFS_1_1 ADD CONSTRAINT TEAL_GPFS_FS_FK  FOREIGN KEY ("rec_id") REFERENCES X_TEALEVENTLOG ("rec_id") ON DELETE CASCADE;
ALTER TABLE x_GPFS_1_2 ADD CONSTRAINT TEAL_GPFS_DSK_FK FOREIGN KEY ("rec_id") REFERENCES X_TEALEVENTLOG ("rec_id") ON DELETE CASCADE;
ALTER TABLE x_GPFS_1_3 ADD CONSTRAINT TEAL_GPFS_PER_FK FOREIGN KEY ("rec_id") REFERENCES X_TEALEVENTLOG ("rec_id") ON DELETE CASCADE;
ALTER TABLE x_GPFS_1_4 ADD CONSTRAINT TEAL_GPFS_MSC_FK FOREIGN KEY ("rec_id") REFERENCES X_TEALEVENTLOG ("rec_id") ON DELETE CASCADE;

ALTER TABLE X_LL_1_1 ADD CONSTRAINT TEAL_LL_FK FOREIGN KEY ("rec_id") REFERENCES X_TEALEVENTLOG ("rec_id") ON DELETE CASCADE;

ALTER TABLE X_SFP_1_1 ADD CONSTRAINT TEAL_SFP_FK FOREIGN KEY ("rec_id") REFERENCES X_TEALEVENTLOG ("rec_id") ON DELETE CASCADE;

CREATE TRIGGER TEAL_DUPALERT_DELETE AFTER DELETE ON X_TEALALERT2ALERT REFERENCING OLD AS OLD FOR EACH ROW BEGIN ATOMIC IF (OLD."assoc_type" = 'D') THEN DELETE FROM X_TEALALERTLOG WHERE "rec_id" = OLD."t_alert_recid"; END IF; END;
CREATE TRIGGER TEAL_ALERTLOG_DELETE BEFORE DELETE ON X_TEALALERTLOG REFERENCING OLD AS OLD FOR EACH ROW BEGIN ATOMIC IF (OLD."state" = 1) THEN SIGNAL SQLSTATE '70003' ('Deletion not permitted'); END IF; END;

DISCONNECT tealdb0;
